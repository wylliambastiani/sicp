Exercise 1.5: Ben Bitdiddle has invented a test to determine whether
the interpreter he is faced with is using applicative-order evaluation 
or normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y) 
  (if (= x 0) 
      0 
      y))
Then he evaluates the expression

(test 0 (p))

What behavior will Ben observe with an interpreter that uses 
applicative-order evaluation? What behavior will he observe with an 
interpreter that uses normal-order evaluation? Explain your answer. 
(Assume that the evaluation rule for the special form if is the same 
whether the interpreter is using normal or applicative order: 
The predicate expression is evaluated first, and the result determines 
whether to evaluate the consequent or the alternative expression.)

-> No caso presente, o interpretador do racket usa applicative order evaluation,
o que faz com que as expressões passadas para test sejam avaliadas antes de chamar o
procedimento test em si. Por conta disso, ao executar a expressão (p) em (test 0 (p)),
(p) começa a se chamar infinitamente, o que demostra que o interpretador utiliza applicative
order evaluation. Caso contrário, a execução da expressão seria feita somente quando o valor dela
fosse necessário, e como o valor passado para o argumento x é 0, jamais chamaria (p).